--| Sending information about the death of the player, 
--| and simulating the connection lost during the emission
--| By TKGP, Anchorpoint, Amon

local prev_fake_conn_status = nil
local prev_money = nil
local is_dead = false

--- Updates the player's connection status
function fake_conn_lost_update_client()
	local cur_fake_conn_status = is_connection_lost()
    crc_pda:get_ui():connection_lost(cur_fake_conn_status)

	--- update connection status
    if prev_fake_conn_status ~= cur_fake_conn_status then
		prev_fake_conn_status = cur_fake_conn_status
		crc_io.send("ConnLost/%s", cur_fake_conn_status)
		printf("Connection status updated to client - "..tostring(cur_fake_conn_status))
	end
end

--- Returns true if the player is underground or there is an emission.
function is_connection_lost()
	return level_weathers.bLevelUnderground or xr_conditions.surge_started()
end

--- updates the EXE application information about the player's money
function update_money()
    local cur_money = db.actor:money()

    if prev_money ~= cur_money then
		prev_money = cur_money
		crc_io.send("Money/%s", cur_money)
    end
end

function actor_on_update()
    update_money()
	fake_conn_lost_update_client()
end

--- send message about player's death
local function onDeath(whoID)
	local section, class
	local who = whoID and alife():object(whoID)

	if not who then
		section = "UNKNOWN"
		class = "UNKNOWN"
	else
		section = who:section_name()
		class = ini_sys:r_string_ex(section, "kind") or ini_sys:r_string_ex(section, "class")

		if class == "AI_STL_S" then
			class = who:community()
		end
	end

	--- allow only a single player death message to be sent
	if not is_dead then
		crc_io.send("Death/%s/%s/%s/%s", db.actor:character_community(), level.name(), class:upper(), section)
		is_dead = true
	end
end

--- Saves information about the selected channel and current connection status before player exit the game
function save_state(m_data)
	m_data.connstatus = prev_fake_conn_status
	m_data.prevChannel = crc_pda:get_ui().channel
end

--- Loads information about the selected channel and current connection status the from save file
function load_state(m_data)
	prev_fake_conn_status = m_data.connstatus or false
	crc_pda.start_channel = m_data.prevChannel or 1
end

function on_game_start()
    is_dead = false

	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("actor_on_before_death", onDeath)
	RegisterScriptCallback("actor_on_update", actor_on_update)
end