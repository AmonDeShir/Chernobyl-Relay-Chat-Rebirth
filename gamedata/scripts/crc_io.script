--| Interface for external application
--| By TKGP, Anchorpoint, brzys

local SCRIPT_VERSION = 8

-- Constants
local UPDATE_INTERVAL = 250
local INPATH = getFS():update_path("$game_config$", "") .. "\\crc_input.txt"
local OUTPATH = getFS():update_path("$game_config$", "") .. "\\crc_output.txt"

local last_update = 0
local send_queue = {}

--- Adds message to the send queue.
--- @param message string
---@param ... any
function send(message, ...)
	local line = message:format(...).."\n"
	table.insert(send_queue, line)
end

--- Writes all messages from the send_queue to a crc_output.txt file. 
--- The exe application then reads them and sends them to the IRC chat.
local function send_messages()
    if #send_queue > 0 then
		local output = io.open(OUTPATH, "a")

		if output then
			for _, line in ipairs(send_queue) do
				output:write(line)
			end

			output:close()
			send_queue = {}
		end
	end
end

--- Reads message types from the receive queue and performs the actions assigned to them. 
--- @param receive_queue string[]
local function handle_receive_queue(receive_queue)
	-- TODO Check if this blocking is needed.
	local input = io.open(INPATH, "w")

	if input then
		input:close()

		for _, line in ipairs(receive_queue) do
			local type, body = line:match("([^/]+)/(.+)")
			local action = crc_actions.actions[type]

			if action then
				action(body)
			else
				printf("CRC Error: unknown action! Action: ", type)
			end
		end
	end
end

--- Returns all messages received by the exe app. (It reads them from the crc_input.txt)
--- @return string[]
local function read_recived_messages()
	local input = io.open(INPATH, "r")
	local receive_queue = {}

    if input then
		for line in input:lines() do
			table.insert(receive_queue, line)
		end

		input:close()
	end

	return receive_queue
end

--- Once every 250 ms (UPDATE_INTERVAL) updates the queue of messages received and to be sent.
local function update()
    if not db.actor or time_global() < last_update + UPDATE_INTERVAL then
        return
    end

    last_update = time_global()

	send_messages()
	handle_receive_queue(read_recived_messages())
end

--- Init communication with EXE App
function handshake()
    send("Handshake/%s", SCRIPT_VERSION)
end

function on_game_start()
	AddUniqueCall(update)
	RegisterScriptCallback("actor_on_first_update", handshake)
end